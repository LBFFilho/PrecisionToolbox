function Filter = TB1()

% NOTES:
% When at least one of the inputs to the multiplier is real, the output of the multiplier is in the product output data type. 
% When both inputs to the multiplier are complex, the result of the multiplication is in the accumulator data type. 

Filter = dsp.FIRDecimator;
Filter.DecimationFactor = 3;
Filter.Numerator = [2, 0, -8, -15, 0, 36, 52, 0, -100, -136, 0, 235,...
    303, 0, -487, -608, 0, 922, 1122, 0, -1628, -1940, 0, 2715, 3186,...
    0, -4326, -5008, 0, 6639, 7604, 0, -9886, -11228, 0, 14388, 16246,...
    0, -20640, -23246, 0, 29509, 33306, 0, -42764, -48768, 0, 64830,...
    76008, 0, -110836, -140672, 0, 287110, 577136, 699040, 577136,...
    287110, 0, -140672, -110836, 0, 76008, 64830, 0, -48768, -42764, 0,...
    33306, 29509, 0, -23246, -20640, 0, 16246, 14388, 0, -11228, -9886,...
    0, 7604, 6639, 0, -5008, -4326, 0, 3186, 2715, 0, -1940, -1628, 0,...
    1122, 922, 0, -608, -487, 0, 303, 235, 0, -136, -100, 0, 52, 36, 0,...
    -15, -8, 0, 2];
Filter.Numerator = Filter.Numerator./sum(Filter.Numerator);

%% Full precision calculations, cast is done externally
Filter.FullPrecisionOverride = true;

end

